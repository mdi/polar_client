# #Polar Accesslink API
#
# Polar Accesslink API documentation
#
# The version of the OpenAPI document: 3
# Contact: b2bhelpdesk@polar.com
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.6.0
#

require "date"
require "time"

module PolarClient
  class NightlyRecharge
    # Absolute link to user owning the sleep
    attr_accessor :polar_user

    # Result date of the Nightly Recharge
    attr_accessor :date

    # Average heart rate as beats per minute (bpm) during a 4-hour period starting at 30 minutes after falling asleep.
    attr_accessor :heart_rate_avg

    # Average time in milliseconds (ms) between successive heart beats during a 4-hour period starting at 30 minutes after falling asleep.
    attr_accessor :beat_to_beat_avg

    # Average variation in the time in milliseconds (ms) between successive heart beats during a 4-hour period starting at 30 minutes after falling asleep. The Heart rate variability is Root Mean Square of Successive Differences (RMSSD) in beat-to-beat intervals.
    attr_accessor :heart_rate_variability_avg

    # Average breathing rate as breaths per minute (bpm) during a 4-hour period starting at 30 minutes after falling asleep.
    attr_accessor :breathing_rate_avg

    # The Nightly Recharge status shows how your body was able to recover from training and stress during the night. Scores for both ANS charge and sleep charge are taken into account. Nightly Recharge status has the following (6-item) scale: very poor (1) – poor (2) – compromised (3) – OK (4) – good (5) – very good (6).
    attr_accessor :nightly_recharge_status

    # ANS stands for autonomic nervous system. ANS charge is formed by measuring heart rate, heart rate variability and breathing rate during roughly the first four hours of your sleep. It is formed comparing your last night to your usual levels from the past 28 days. The scale is from -10.0 to +10.0. Around zero is your usual level.
    attr_accessor :ans_charge

    # ANS charge status = much below usual (1) - below usual (2) - usual (3) - above usual (4) - much above usual (5)
    attr_accessor :ans_charge_status

    # 5-minute average samples of heart rate variability. Unit of samples is milliseconds(ms).
    attr_accessor :hrv_samples

    # 5-minute average samples of breathing rate. Unit of samples is breaths per minute (bpm).
    attr_accessor :breathing_samples

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        polar_user: :polar_user,
        date: :date,
        heart_rate_avg: :heart_rate_avg,
        beat_to_beat_avg: :beat_to_beat_avg,
        heart_rate_variability_avg: :heart_rate_variability_avg,
        breathing_rate_avg: :breathing_rate_avg,
        nightly_recharge_status: :nightly_recharge_status,
        ans_charge: :ans_charge,
        ans_charge_status: :ans_charge_status,
        hrv_samples: :hrv_samples,
        breathing_samples: :breathing_samples
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        polar_user: :String,
        date: :Date,
        heart_rate_avg: :Integer,
        beat_to_beat_avg: :Integer,
        heart_rate_variability_avg: :Integer,
        breathing_rate_avg: :Float,
        nightly_recharge_status: :Integer,
        ans_charge: :Float,
        ans_charge_status: :Integer,
        hrv_samples: :Object,
        breathing_samples: :Object
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if !attributes.is_a?(Hash)
        fail ArgumentError, "The input argument (attributes) must be a hash in `PolarClient::NightlyRecharge` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if !self.class.attribute_map.key?(k.to_sym)
          fail ArgumentError, "`#{k}` is not a valid attribute in `PolarClient::NightlyRecharge`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:polar_user)
        self.polar_user = attributes[:polar_user]
      end

      if attributes.key?(:date)
        self.date = attributes[:date]
      end

      if attributes.key?(:heart_rate_avg)
        self.heart_rate_avg = attributes[:heart_rate_avg]
      end

      if attributes.key?(:beat_to_beat_avg)
        self.beat_to_beat_avg = attributes[:beat_to_beat_avg]
      end

      if attributes.key?(:heart_rate_variability_avg)
        self.heart_rate_variability_avg = attributes[:heart_rate_variability_avg]
      end

      if attributes.key?(:breathing_rate_avg)
        self.breathing_rate_avg = attributes[:breathing_rate_avg]
      end

      if attributes.key?(:nightly_recharge_status)
        self.nightly_recharge_status = attributes[:nightly_recharge_status]
      end

      if attributes.key?(:ans_charge)
        self.ans_charge = attributes[:ans_charge]
      end

      if attributes.key?(:ans_charge_status)
        self.ans_charge_status = attributes[:ans_charge_status]
      end

      if attributes.key?(:hrv_samples)
        self.hrv_samples = attributes[:hrv_samples]
      end

      if attributes.key?(:breathing_samples)
        self.breathing_samples = attributes[:breathing_samples]
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)
      self.class == other.class &&
        polar_user == other.polar_user &&
        date == other.date &&
        heart_rate_avg == other.heart_rate_avg &&
        beat_to_beat_avg == other.beat_to_beat_avg &&
        heart_rate_variability_avg == other.heart_rate_variability_avg &&
        breathing_rate_avg == other.breathing_rate_avg &&
        nightly_recharge_status == other.nightly_recharge_status &&
        ans_charge == other.ans_charge &&
        ans_charge_status == other.ans_charge_status &&
        hrv_samples == other.hrv_samples &&
        breathing_samples == other.breathing_samples
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [polar_user, date, heart_rate_avg, beat_to_beat_avg, heart_rate_variability_avg, breathing_rate_avg, nightly_recharge_status, ans_charge, ans_charge_status, hrv_samples, breathing_samples].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PolarClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
