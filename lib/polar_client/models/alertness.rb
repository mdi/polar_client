# #Polar Accesslink API
#
# Polar Accesslink API documentation
#
# The version of the OpenAPI document: 3
# Contact: b2bhelpdesk@polar.com
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.6.0
#

require "date"
require "time"

module PolarClient
  # Alertness period data
  class Alertness
    # Grade
    attr_accessor :grade

    # Grade validity seconds
    attr_accessor :grade_validity_seconds

    # Grade type
    attr_accessor :grade_type

    # Grade classification
    attr_accessor :grade_classification

    # Validity
    attr_accessor :validity

    # Sleep inertia
    attr_accessor :sleep_inertia

    # Sleep type
    attr_accessor :sleep_type

    # Result type
    attr_accessor :result_type

    # Alertness period start time (UTC)
    attr_accessor :period_start_time

    # Alertness period end time (UTC)
    attr_accessor :period_end_time

    # Sleep period start time (UTC)
    attr_accessor :sleep_period_start_time

    # Sleep period end time (UTC)
    attr_accessor :sleep_period_end_time

    # Sleep timezone offset minutes
    attr_accessor :sleep_timezone_offset_minutes

    # Alertness hourly data for the alertness period
    attr_accessor :hourly_data

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        grade: :grade,
        grade_validity_seconds: :grade_validity_seconds,
        grade_type: :grade_type,
        grade_classification: :grade_classification,
        validity: :validity,
        sleep_inertia: :sleep_inertia,
        sleep_type: :sleep_type,
        result_type: :result_type,
        period_start_time: :period_start_time,
        period_end_time: :period_end_time,
        sleep_period_start_time: :sleep_period_start_time,
        sleep_period_end_time: :sleep_period_end_time,
        sleep_timezone_offset_minutes: :sleep_timezone_offset_minutes,
        hourly_data: :hourly_data
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        grade: :Float,
        grade_validity_seconds: :Float,
        grade_type: :String,
        grade_classification: :String,
        validity: :String,
        sleep_inertia: :String,
        sleep_type: :String,
        result_type: :String,
        period_start_time: :Date,
        period_end_time: :Date,
        sleep_period_start_time: :Date,
        sleep_period_end_time: :Date,
        sleep_timezone_offset_minutes: :Float,
        hourly_data: :"Array<AlertnessHourlyData>"
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if !attributes.is_a?(Hash)
        fail ArgumentError, "The input argument (attributes) must be a hash in `PolarClient::Alertness` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if !self.class.attribute_map.key?(k.to_sym)
          fail ArgumentError, "`#{k}` is not a valid attribute in `PolarClient::Alertness`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:grade)
        self.grade = attributes[:grade]
      end

      if attributes.key?(:grade_validity_seconds)
        self.grade_validity_seconds = attributes[:grade_validity_seconds]
      end

      if attributes.key?(:grade_type)
        self.grade_type = attributes[:grade_type]
      end

      if attributes.key?(:grade_classification)
        self.grade_classification = attributes[:grade_classification]
      end

      if attributes.key?(:validity)
        self.validity = attributes[:validity]
      end

      if attributes.key?(:sleep_inertia)
        self.sleep_inertia = attributes[:sleep_inertia]
      end

      if attributes.key?(:sleep_type)
        self.sleep_type = attributes[:sleep_type]
      end

      if attributes.key?(:result_type)
        self.result_type = attributes[:result_type]
      end

      if attributes.key?(:period_start_time)
        self.period_start_time = attributes[:period_start_time]
      end

      if attributes.key?(:period_end_time)
        self.period_end_time = attributes[:period_end_time]
      end

      if attributes.key?(:sleep_period_start_time)
        self.sleep_period_start_time = attributes[:sleep_period_start_time]
      end

      if attributes.key?(:sleep_period_end_time)
        self.sleep_period_end_time = attributes[:sleep_period_end_time]
      end

      if attributes.key?(:sleep_timezone_offset_minutes)
        self.sleep_timezone_offset_minutes = attributes[:sleep_timezone_offset_minutes]
      end

      if attributes.key?(:hourly_data)
        if (value = attributes[:hourly_data]).is_a?(Array)
          self.hourly_data = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      grade_type_validator = EnumAttributeValidator.new("String", ["GRADE_TYPE_UNKNOWN", "GRADE_TYPE_PRIMARY", "GRADE_TYPE_ADDITIONAL"])
      return false unless grade_type_validator.valid?(@grade_type)
      grade_classification_validator = EnumAttributeValidator.new("String", ["GRADE_CLASSIFICATION_UNKNOWN", "GRADE_CLASSIFICATION_WEAK", "GRADE_CLASSIFICATION_FAIR", "GRADE_CLASSIFICATION_STRONG", "GRADE_CLASSIFICATION_EXCELLENT"])
      return false unless grade_classification_validator.valid?(@grade_classification)
      validity_validator = EnumAttributeValidator.new("String", ["VALIDITY_UNKNOWN", "VALIDITY_RESET", "VALIDITY_NOT_VALID", "VALIDITY_ESTIMATE", "VALIDITY_VALID"])
      return false unless validity_validator.valid?(@validity)
      sleep_inertia_validator = EnumAttributeValidator.new("String", ["SLEEP_INERTIA_UNKNOWN", "SLEEP_INERTIA_NO_INERTIA", "SLEEP_INERTIA_MILD", "SLEEP_INERTIA_MODERATE", "SLEEP_INERTIA_HEAVY"])
      return false unless sleep_inertia_validator.valid?(@sleep_inertia)
      sleep_type_validator = EnumAttributeValidator.new("String", ["SLEEP_TYPE_UNKNOWN", "SLEEP_TYPE_PRIMARY", "SLEEP_TYPE_SECONDARY", "SLEEP_TYPE_ARTIFICIAL"])
      return false unless sleep_type_validator.valid?(@sleep_type)
      result_type_validator = EnumAttributeValidator.new("String", ["ALERTNESS_TYPE_UNKNOWN", "ALERTNESS_TYPE_PREDICTION", "ALERTNESS_TYPE_HISTORY"])
      return false unless result_type_validator.valid?(@result_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grade_type Object to be assigned
    def grade_type=(grade_type)
      validator = EnumAttributeValidator.new("String", ["GRADE_TYPE_UNKNOWN", "GRADE_TYPE_PRIMARY", "GRADE_TYPE_ADDITIONAL"])
      unless validator.valid?(grade_type)
        fail ArgumentError, "invalid value for \"grade_type\", must be one of #{validator.allowable_values}."
      end
      @grade_type = grade_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grade_classification Object to be assigned
    def grade_classification=(grade_classification)
      validator = EnumAttributeValidator.new("String", ["GRADE_CLASSIFICATION_UNKNOWN", "GRADE_CLASSIFICATION_WEAK", "GRADE_CLASSIFICATION_FAIR", "GRADE_CLASSIFICATION_STRONG", "GRADE_CLASSIFICATION_EXCELLENT"])
      unless validator.valid?(grade_classification)
        fail ArgumentError, "invalid value for \"grade_classification\", must be one of #{validator.allowable_values}."
      end
      @grade_classification = grade_classification
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] validity Object to be assigned
    def validity=(validity)
      validator = EnumAttributeValidator.new("String", ["VALIDITY_UNKNOWN", "VALIDITY_RESET", "VALIDITY_NOT_VALID", "VALIDITY_ESTIMATE", "VALIDITY_VALID"])
      unless validator.valid?(validity)
        fail ArgumentError, "invalid value for \"validity\", must be one of #{validator.allowable_values}."
      end
      @validity = validity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sleep_inertia Object to be assigned
    def sleep_inertia=(sleep_inertia)
      validator = EnumAttributeValidator.new("String", ["SLEEP_INERTIA_UNKNOWN", "SLEEP_INERTIA_NO_INERTIA", "SLEEP_INERTIA_MILD", "SLEEP_INERTIA_MODERATE", "SLEEP_INERTIA_HEAVY"])
      unless validator.valid?(sleep_inertia)
        fail ArgumentError, "invalid value for \"sleep_inertia\", must be one of #{validator.allowable_values}."
      end
      @sleep_inertia = sleep_inertia
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sleep_type Object to be assigned
    def sleep_type=(sleep_type)
      validator = EnumAttributeValidator.new("String", ["SLEEP_TYPE_UNKNOWN", "SLEEP_TYPE_PRIMARY", "SLEEP_TYPE_SECONDARY", "SLEEP_TYPE_ARTIFICIAL"])
      unless validator.valid?(sleep_type)
        fail ArgumentError, "invalid value for \"sleep_type\", must be one of #{validator.allowable_values}."
      end
      @sleep_type = sleep_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] result_type Object to be assigned
    def result_type=(result_type)
      validator = EnumAttributeValidator.new("String", ["ALERTNESS_TYPE_UNKNOWN", "ALERTNESS_TYPE_PREDICTION", "ALERTNESS_TYPE_HISTORY"])
      unless validator.valid?(result_type)
        fail ArgumentError, "invalid value for \"result_type\", must be one of #{validator.allowable_values}."
      end
      @result_type = result_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)
      self.class == other.class &&
        grade == other.grade &&
        grade_validity_seconds == other.grade_validity_seconds &&
        grade_type == other.grade_type &&
        grade_classification == other.grade_classification &&
        validity == other.validity &&
        sleep_inertia == other.sleep_inertia &&
        sleep_type == other.sleep_type &&
        result_type == other.result_type &&
        period_start_time == other.period_start_time &&
        period_end_time == other.period_end_time &&
        sleep_period_start_time == other.sleep_period_start_time &&
        sleep_period_end_time == other.sleep_period_end_time &&
        sleep_timezone_offset_minutes == other.sleep_timezone_offset_minutes &&
        hourly_data == other.hourly_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [grade, grade_validity_seconds, grade_type, grade_classification, validity, sleep_inertia, sleep_type, result_type, period_start_time, period_end_time, sleep_period_start_time, sleep_period_end_time, sleep_timezone_offset_minutes, hourly_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PolarClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
