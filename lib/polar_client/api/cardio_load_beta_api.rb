# #Polar Accesslink API
#
# Polar Accesslink API documentation
#
# The version of the OpenAPI document: 3
# Contact: b2bhelpdesk@polar.com
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.6.0
#

require "cgi"

module PolarClient
  class CardioLoadBetaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get cardio load by date
    # Returns cardio load data for selected date.
    # @param date [Date] Inclusive start date of range as ISO-8601 date string, example: \&quot;2022-01-01\&quot;
    # @param [Hash] opts the optional parameters
    # @return [Array<CardioLoad>]
    def v3_users_cardio_load_date_get(date, opts = {})
      data, _status_code, _headers = v3_users_cardio_load_date_get_with_http_info(date, opts)
      data
    end

    # Get cardio load by date
    # Returns cardio load data for selected date.
    # @param date [Date] Inclusive start date of range as ISO-8601 date string, example: \&quot;2022-01-01\&quot;
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CardioLoad>, Integer, Hash)>] Array<CardioLoad> data, response status code and response headers
    def v3_users_cardio_load_date_get_with_http_info(date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CardioLoadBetaApi.v3_users_cardio_load_date_get ..."
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling CardioLoadBetaApi.v3_users_cardio_load_date_get"
      end
      # resource path
      local_var_path = "/v3/users/cardio-load/{date}".sub("{" + "date" + "}", CGI.escape(date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Array<CardioLoad>"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["OAuth2"]

      new_options = opts.merge(
        operation: :"CardioLoadBetaApi.v3_users_cardio_load_date_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardioLoadBetaApi#v3_users_cardio_load_date_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get cardio load by date range
    # Returns cardio load data for selected date range.  The response list contains cardio load objects for every day between range even if the cardio load values cannot be calculated, in this case the cardio load status is represented as LOAD_STATUS_NOT_AVAILABLE.
    # @param from [Date] Inclusive as ISO-8601 date string, example: \&quot;2022-01-01\&quot;
    # @param to [Date] Inclusive as ISO-8601 date string, example: \&quot;2022-01-01\&quot;
    # @param [Hash] opts the optional parameters
    # @return [Array<CardioLoad>]
    def v3_users_cardio_load_date_get_0(from, to, opts = {})
      data, _status_code, _headers = v3_users_cardio_load_date_get_0_with_http_info(from, to, opts)
      data
    end

    # Get cardio load by date range
    # Returns cardio load data for selected date range.  The response list contains cardio load objects for every day between range even if the cardio load values cannot be calculated, in this case the cardio load status is represented as LOAD_STATUS_NOT_AVAILABLE.
    # @param from [Date] Inclusive as ISO-8601 date string, example: \&quot;2022-01-01\&quot;
    # @param to [Date] Inclusive as ISO-8601 date string, example: \&quot;2022-01-01\&quot;
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CardioLoad>, Integer, Hash)>] Array<CardioLoad> data, response status code and response headers
    def v3_users_cardio_load_date_get_0_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CardioLoadBetaApi.v3_users_cardio_load_date_get_0 ..."
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling CardioLoadBetaApi.v3_users_cardio_load_date_get_0"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling CardioLoadBetaApi.v3_users_cardio_load_date_get_0"
      end
      # resource path
      local_var_path = "/v3/users/cardio-load/date"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:from] = from
      query_params[:to] = to

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Array<CardioLoad>"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["OAuth2"]

      new_options = opts.merge(
        operation: :"CardioLoadBetaApi.v3_users_cardio_load_date_get_0",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardioLoadBetaApi#v3_users_cardio_load_date_get_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List cardio loads
    # Returns cardio load data for the last 28 days.
    # @param [Hash] opts the optional parameters
    # @return [Array<CardioLoad>]
    def v3_users_cardio_load_get(opts = {})
      data, _status_code, _headers = v3_users_cardio_load_get_with_http_info(opts)
      data
    end

    # List cardio loads
    # Returns cardio load data for the last 28 days.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CardioLoad>, Integer, Hash)>] Array<CardioLoad> data, response status code and response headers
    def v3_users_cardio_load_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CardioLoadBetaApi.v3_users_cardio_load_get ..."
      end
      # resource path
      local_var_path = "/v3/users/cardio-load/"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Array<CardioLoad>"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["OAuth2"]

      new_options = opts.merge(
        operation: :"CardioLoadBetaApi.v3_users_cardio_load_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardioLoadBetaApi#v3_users_cardio_load_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get historical data by days
    # Returns historical cardio load data for selected period of days counting from current date.
    # @param days [Integer] Period of days.
    # @param [Hash] opts the optional parameters
    # @return [Array<CardioLoad>]
    def v3_users_cardio_load_period_days_days_get(days, opts = {})
      data, _status_code, _headers = v3_users_cardio_load_period_days_days_get_with_http_info(days, opts)
      data
    end

    # Get historical data by days
    # Returns historical cardio load data for selected period of days counting from current date.
    # @param days [Integer] Period of days.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CardioLoad>, Integer, Hash)>] Array<CardioLoad> data, response status code and response headers
    def v3_users_cardio_load_period_days_days_get_with_http_info(days, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CardioLoadBetaApi.v3_users_cardio_load_period_days_days_get ..."
      end
      # verify the required parameter 'days' is set
      if @api_client.config.client_side_validation && days.nil?
        fail ArgumentError, "Missing the required parameter 'days' when calling CardioLoadBetaApi.v3_users_cardio_load_period_days_days_get"
      end
      if @api_client.config.client_side_validation && days > 180
        fail ArgumentError, 'invalid value for "days" when calling CardioLoadBetaApi.v3_users_cardio_load_period_days_days_get, must be smaller than or equal to 180.'
      end

      if @api_client.config.client_side_validation && days < 1
        fail ArgumentError, 'invalid value for "days" when calling CardioLoadBetaApi.v3_users_cardio_load_period_days_days_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/v3/users/cardio-load/period/days/{days}".sub("{" + "days" + "}", CGI.escape(days.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Array<CardioLoad>"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["OAuth2"]

      new_options = opts.merge(
        operation: :"CardioLoadBetaApi.v3_users_cardio_load_period_days_days_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardioLoadBetaApi#v3_users_cardio_load_period_days_days_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get historical data by months
    # Returns historical cardio load data for selected period of months counting from current date.
    # @param months [Integer] Period of months.
    # @param [Hash] opts the optional parameters
    # @return [Array<CardioLoad>]
    def v3_users_cardio_load_period_months_months_get(months, opts = {})
      data, _status_code, _headers = v3_users_cardio_load_period_months_months_get_with_http_info(months, opts)
      data
    end

    # Get historical data by months
    # Returns historical cardio load data for selected period of months counting from current date.
    # @param months [Integer] Period of months.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CardioLoad>, Integer, Hash)>] Array<CardioLoad> data, response status code and response headers
    def v3_users_cardio_load_period_months_months_get_with_http_info(months, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CardioLoadBetaApi.v3_users_cardio_load_period_months_months_get ..."
      end
      # verify the required parameter 'months' is set
      if @api_client.config.client_side_validation && months.nil?
        fail ArgumentError, "Missing the required parameter 'months' when calling CardioLoadBetaApi.v3_users_cardio_load_period_months_months_get"
      end
      if @api_client.config.client_side_validation && months > 6
        fail ArgumentError, 'invalid value for "months" when calling CardioLoadBetaApi.v3_users_cardio_load_period_months_months_get, must be smaller than or equal to 6.'
      end

      if @api_client.config.client_side_validation && months < 1
        fail ArgumentError, 'invalid value for "months" when calling CardioLoadBetaApi.v3_users_cardio_load_period_months_months_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/v3/users/cardio-load/period/months/{months}".sub("{" + "months" + "}", CGI.escape(months.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Array<CardioLoad>"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["OAuth2"]

      new_options = opts.merge(
        operation: :"CardioLoadBetaApi.v3_users_cardio_load_period_months_months_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardioLoadBetaApi#v3_users_cardio_load_period_months_months_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
