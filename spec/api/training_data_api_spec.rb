# #Polar Accesslink API
#
# Polar Accesslink API documentation
#
# The version of the OpenAPI document: 3
# Contact: b2bhelpdesk@polar.com
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.6.0
#

require "spec_helper"
require "json"

# Unit tests for PolarClient::TrainingDataApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "TrainingDataApi" do
  before do
    # run before each test
    @api_instance = PolarClient::TrainingDataApi.new
  end

  after do
    # run after each test
  end

  describe "test an instance of TrainingDataApi" do
    it "should create an instance of TrainingDataApi" do
      expect(@api_instance).to be_instance_of(PolarClient::TrainingDataApi)
    end
  end

  # unit tests for commit_exercise_transaction
  # Commit transaction
  # After successfully retrieving training session data within a transaction, partners are expected to commit the transaction.
  # @param transaction_id Transaction identifier
  # @param user_id User identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "commit_exercise_transaction test" do
    it "should work" do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_exercise_transaction
  # Create transaction
  # Check for new training data and create a new transaction if found. Only data uploaded to Flow in the last 30 days will be available. Only data that has been uploaded to Flow after the user is registered with your client will be available.
  # @param user_id User identifier
  # @param [Hash] opts the optional parameters
  # @return [TransactionLocation]
  describe "create_exercise_transaction test" do
    it "should work" do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_available_samples
  # Get available samples
  # Retrieve list of links to available samples in training session
  # @param user_id User identifier
  # @param transaction_id Transaction identifier
  # @param exercise_id Exercise identifier
  # @param [Hash] opts the optional parameters
  # @return [Samples]
  describe "get_available_samples test" do
    it "should work" do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_exercise_summary
  # Get exercise summary
  # Retrieve training session summary data
  # @param user_id User identifier
  # @param transaction_id Transaction identifier
  # @param exercise_id Exercise identifier
  # @param [Hash] opts the optional parameters
  # @return [Exercise]
  describe "get_exercise_summary test" do
    it "should work" do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_fit
  # Get FIT
  # Retrieve exercise in FIT format. See [FIT sport mappings in appendix](#sport-type-mapping-in-fit-files).
  # @param user_id User identifier
  # @param transaction_id Transaction identifier
  # @param exercise_id Exercise identifier
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe "get_fit test" do
    it "should work" do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_gpx
  # Get GPX
  # Retrieve training session summary data in GPX format
  # @param user_id User identifier
  # @param transaction_id Transaction identifier
  # @param exercise_id Exercise identifier
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_pause_times Whether to add pauses as part of the route. Default is false.
  # @return [String]
  describe "get_gpx test" do
    it "should work" do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_heart_rate_zones
  # Get heart rate zones
  # Retrieve heart rate zones in training session
  # @param user_id User identifier
  # @param transaction_id Transaction identifier
  # @param exercise_id Exercise identifier
  # @param [Hash] opts the optional parameters
  # @return [Zones]
  describe "get_heart_rate_zones test" do
    it "should work" do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_samples
  # Get samples
  # Retrieve sample data of given type
  # @param type_id Sample type id
  # @param user_id User identifier
  # @param transaction_id Transaction identifier
  # @param exercise_id Exercise identifier
  # @param [Hash] opts the optional parameters
  # @return [Sample]
  describe "get_samples test" do
    it "should work" do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_tcx
  # Get TCX
  # Retrieve exercise in TCX format
  # @param user_id User identifier
  # @param transaction_id Transaction identifier
  # @param exercise_id Exercise identifier
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe "get_tcx test" do
    it "should work" do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_exercises
  # List exercises
  # After successfully initiating a transaction, training sessions included within it can be retrieved with the provided transactionId.
  # @param transaction_id Transaction identifier
  # @param user_id User identifier
  # @param [Hash] opts the optional parameters
  # @return [Exercises]
  describe "list_exercises test" do
    it "should work" do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end
end
